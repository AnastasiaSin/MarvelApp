{"version":3,"file":"static/js/108.215caf6f.chunk.js","mappings":"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","sources":["components/Error/ErrorMessage.js","components/pages/SingleComicPage/SingleComicPage.js","hooks/http.hook.js","services/MarvelServices.js"],"sourcesContent":["import img from '../../resources/img/error.gif'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default Error;","import './singleComic.scss';\r\nimport useMarvelServices from '../../../services/MarvelServices';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport Spinner from '../../Spinner/Spinner';\r\nimport Error from '../../Error/ErrorMessage';\r\n\r\nconst SingleComicPage = () => {\r\n    const { comicId } = useParams()\r\n    console.log('gg:', comicId)\r\n\r\n    const [comic, setComic] = useState(null)\r\n    const { loading, error, getComic, clearError } = useMarvelServices();\r\n\r\n    const updateComics = () => {\r\n        clearError()\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (char) => {\r\n        setComic(char);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        updateComics()\r\n    }, [comicId])\r\n\r\n\r\n    const errorMessage = error ? <Error/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({comic}) => {\r\n    const { name, description, thumbnail, price, pageCount, language } = comic\r\n    return (\r\n        <div className=\"single-comic\">\r\n        <img src={thumbnail} alt={name} className=\"single-comic__img\" />\r\n        <div className=\"single-comic__info\">\r\n            <h2 className=\"single-comic__name\">{name}</h2>\r\n            <p className=\"single-comic__descr\">{description}</p>\r\n            <p className=\"single-comic__descr\">{pageCount}</p>\r\n            <p className=\"single-comic__descr\">Language: {language}</p>\r\n            <div className=\"single-comic__price\">{price}</div>\r\n        </div>\r\n        <Link to=\"..\" className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            let res = await fetch(url, { method, body, headers })\r\n            if (!res.ok) throw new Error('error')\r\n            const data = res.json()\r\n            setLoading(false)\r\n\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServices = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = '6a8520ae408f3ecb169ed9497374ed90'\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230) + '...'}` : 'no desc',\r\n            _description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            wiki: char.urls[1].url,\r\n            homepage: char.urls[0].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelServices"],"names":["Error","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","name","description","thumbnail","price","pageCount","language","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","console","log","setComic","useState","loading","error","getComic","clearError","useMarvelServices","onComicLoaded","char","useEffect","then","errorMessage","spinner","Spinner","content","_Fragment","_apiBase","_apiKey","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","res","fetch","ok","data","json","e","message","_transformComic","comics","_comics$textObjects$","id","title","concat","path","extension","textObjects","prices","_transformCharacter","slice","_description","wiki","urls","homepage","items","getAllCharacters","offset","results","map","getCharacter","getAllComics"],"sourceRoot":""}