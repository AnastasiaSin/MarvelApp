{"version":3,"file":"static/js/561.b68bf1b5.chunk.js","mappings":"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","sources":["components/Error/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsListPage.js","hooks/http.hook.js","services/MarvelServices.js"],"sourcesContent":["import img from '../../resources/img/error.gif'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default Error;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import './comicsList.scss';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelServices from '../../services/MarvelServices';\nimport Error from '../Error/ErrorMessage';\nimport Spinner from '../Spinner/Spinner';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelServices();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    const renderItems = (comics) => {\n\n        const comicsItems = comics.map((item, i) => {\n            return (\n                <li className=\"comics__item\">\n                    <Link to={`${item.id}`}>\n                        <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (<ul className=\"comics__grid\">{comicsItems}</ul>)\n    }\n\n    const items = renderItems(comicsList)\n    const load = loading && !newItemLoading ? <Spinner /> : null\n    const errorMessage = error ? <Error /> : null\n\n    return (\n        <div className=\"comics__list\">\n            {load}\n            {errorMessage}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\"\r\nimport ComicsList from \"../comicsList/ComicsList\"\r\n\r\nconst ComicsListPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsListPage","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            let res = await fetch(url, { method, body, headers })\r\n            if (!res.ok) throw new Error('error')\r\n            const data = res.json()\r\n            setLoading(false)\r\n\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServices = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = '6a8520ae408f3ecb169ed9497374ed90'\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230) + '...'}` : 'no desc',\r\n            _description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            wiki: char.urls[1].url,\r\n            homepage: char.urls[0].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelServices"],"names":["Error","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelServices","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","comics","comicsItems","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","load","Spinner","errorMessage","onClick","disabled","ComicsListPage","_Fragment","_apiBase","_apiKey","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","res","fetch","ok","data","json","e","message","_transformComic","_comics$textObjects$","description","pageCount","path","extension","language","textObjects","prices","_transformCharacter","char","name","slice","_description","wiki","urls","homepage","getAllCharacters","results","getCharacter","getComic"],"sourceRoot":""}