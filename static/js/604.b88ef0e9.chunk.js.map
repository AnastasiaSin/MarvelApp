{"version":3,"file":"static/js/604.b88ef0e9.chunk.js","mappings":"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","sources":["components/Error/ErrorMessage.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.jsx","hooks/http.hook.js","services/MarvelServices.js"],"sourcesContent":["import img from '../../resources/img/error.gif'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default Error;","import { Component } from \"react\";\r\nimport ErrorMessage  from '../Error/ErrorMessage'\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import './randomChar.scss';\nimport { useEffect, useState } from 'react';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelServices from '../../services/MarvelServices';\nimport Spinner from '../Spinner/Spinner'\nimport Error from '../Error/ErrorMessage';\n\nconst RandomChar = () => {\n   \n    const [char, setChar] = useState(null);\n    const { loading, error, clearError, getCharacter } = useMarvelServices()\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        let id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        clearError()\n        getCharacter(id).then(onCharLoaded)\n    }\n\n    useEffect(() => {\n        updateChar()\n    }, [])\n\n\n\n    const load = loading ? <Spinner /> : null\n    const errorMessage = error ? <Error /> : null\n    const content = !(loading || error || !char) ? <View char={char} /> : null\n\n    return (\n\n        <div className=\"randomchar\">\n            {load}\n            {errorMessage}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\n\nconst View = ({ char }) => {\n    const { thumbnail, name, wiki, pageHome, description } = char\n    \n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p title={description} className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={pageHome} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport { useEffect, useState, useRef } from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/ErrorMessage';\nimport useMarvelServices from '../../services/MarvelServices';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const {loading, error, getAllCharacters} = useMarvelServices()\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n\n    const onRequest = (offset, init) => {\n       init ? setNewItemLoading(false): setNewItemLoading(true)\n\n        getAllCharacters(offset)\n            .then(onCharLoaded)\n            \n    }\n\n    const onCharLoaded = (newCharList) => {\n        let ended = false\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList((list) => [...list, ...newCharList])\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n\n    console.log('jhhjhhhh')\n    const itemRefs = useRef([])\n\n    const focusOnItem =(id)=> {\n        itemRefs.current.forEach((el)=> el.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = (char) => {\n\n        return char.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            return (\n\n                <li \n                 ref={(el)=> itemRefs.current[i] = el}\n                 className=\"char__item\"\n                 key={item.id}\n                  onClick={() => {\n                        props.onCharSelected(item.id)\n                        focusOnItem(i)\n                    }\n                  }\n                  >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n    }\n\n    const items = renderItems(charList)\n    const load = loading && !newItemLoading ? <Spinner /> : null\n    const errorMessage = error ? <Error /> : null\n\n    return (\n        <div className=\"char__list\">\n            <ul className=\"char__grid\">\n                {load}\n                {errorMessage}\n                {items}\n\n            </ul>\n            <button\n                onClick={() => onRequest(offset)}\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport { useEffect, useState } from 'react';\nimport Skeleton from '../skeleton/Skeleton'\nimport useMarvelServices from '../../services/MarvelServices';\nimport Spinner from '../Spinner/Spinner';\nimport Error from '../Error/ErrorMessage';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n   \n    const {loading, error, getCharacter, clearError} = useMarvelServices();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n           \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <Error/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    console.log(comics)\n  \n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        console.log(item.resourceURI.split('/').reverse()[0])\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`comics/${item.resourceURI.split('/').reverse()[0]}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\n// CharInfo.propTypes = {\n//     charId: PropTypes.number\n// }\n\n\nexport default CharInfo;","import ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\nimport RandomChar from \"../randomChar/RandomChar\"\r\nimport CharList from \"../charList/CharList\"\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useState } from \"react\"\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            let res = await fetch(url, { method, body, headers })\r\n            if (!res.ok) throw new Error('error')\r\n            const data = res.json()\r\n            setLoading(false)\r\n\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServices = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = '6a8520ae408f3ecb169ed9497374ed90'\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230) + '...'}` : 'no desc',\r\n            _description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            wiki: char.urls[1].url,\r\n            homepage: char.urls[0].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelServices"],"names":["Error","_jsx","style","display","width","height","objectFit","margin","src","img","alt","ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","this","setState","render","ErrorMessage","props","children","View","_ref","char","thumbnail","name","wiki","pageHome","description","imgStyle","_jsxs","className","title","href","RandomChar","setChar","useState","loading","clearError","getCharacter","useMarvelServices","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","load","Spinner","errorMessage","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","init","newCharList","ended","length","list","console","log","itemRefs","useRef","items","map","item","i","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","disabled","Skeleton","_Fragment","homepage","comics","resourceURI","split","reverse","Link","to","concat","charId","skeleton","spinner","MainPage","selectedChar","CharList","CharInfo","decoration","_apiBase","_apiKey","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","res","fetch","ok","data","json","e","message","_transformComic","_comics$textObjects$","pageCount","path","extension","language","textObjects","price","prices","_transformCharacter","slice","_description","urls","results","getAllComics","getComic"],"sourceRoot":""}